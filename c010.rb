#問題
# 今日みたいな天気のよい休日は、近所の公園に行って読書をしましょう！
# 早速、お気に入りの本を持って公園にやってきたあなたでしたが、不運なことに公園の一角で工事が行われているようです。
# 工事現場の近くは騒音が大きいので読書に向いていません。 そこであなたは、まず読書に適した場所を探すことにしました。

# 工事現場は公園にただ一つだけあり、その位置は (a, b) です。
# 工事現場から距離 R メートル未満は騒音が大きいので読書には適していません。
# また、公園には読書にうってつけの木陰が N 箇所あり、i 番目の木陰の位置は (x_i, y_i) です。

# 以上の情報が与えられたとき、各木陰が読書に適している(つまり、工事現場から R メートル以上離れている)かどうかを判定するプログラムを書いてください。

# 「位置 (x, y) が工事現場から R メートル以上離れている」という条件は以下の式で表されます。
# (x - a)^2 + (y - b)^2 >= R^2



# 入力される値
# 1 行目には 3 つの整数 a、b、R が入力されます。
# a、b はそれぞれ工事現場の位置の x 座標、y 座標を、R は工事現場の騒音の大きさを表します。
# 2 行目には木陰の数を表す整数 N が入力されます。 続く N 行には各木陰の座標を表す 2 つの整数 x_i、y_i が入力されます。
# a b R　　　#工事現場のx座標,工事現場のy座標,工事現場の騒音の大きさ
# N　　　　　#木陰の数
# x_1 y_1　　#木陰1のx座標,木陰1のy座標
# x_2 y_2　　#木陰2のx座標,木陰2のy座標
# ...
# x_N y_N　　#木陰Nのx座標,木陰Nのy座標
# それぞれの値は文字列で標準入力から渡されます。



# 期待する出力
# 出力は N 行からなります。 N 個の木陰それぞれに対して、その木陰が読書に適している
# (つまり、工事現場から R メートル以上離れている)ならば "silent" と出力してください。
# その木陰が読書に適していないならば "noisy" と出力してください。

# 最後は改行し、余計な文字、空行を含んではいけません。



# 条件
# すべてのテストケースで以下の条件を満たします。

# 入力値はすべて整数で以下を満たします。
# 0 ≦ a ≦ 100
# 0 ≦ b ≦ 100
# 1 ≦ R ≦ 100
# 1 ≦ N ≦ 1000
# 0 ≦ x_i ≦ 100
# 0 ≦ y_i ≦ 100



#解答コード

a, b, r = gets.chomp.split.map(&:to_i)
n = gets.to_i
n.times do
    x, y = gets.chomp.split.map(&:to_i)
    if (x - a)**2 + (y - b)**2 >= r**2
        puts "silent"
    else    
        puts "noisy"
    end 
end    



#解答時間　6分3秒
#学習ポイント
#累乗の表記の仕方。
#**2や**3で2乗、3乗を表現できる。