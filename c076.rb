# 問題
# あなたは株式会社パイザでアルバイトをしています。
# 給料は以下のルールで決まっています。

# ・9 時から 17 時まで : 時給 X 円 (通常の時給)
# ・17 時から 22 時まで : 時給 Y 円 (夜の時給)
# ・それ以外の時間 : 時給 Z 円 (深夜の時給)

# あなたの N 日間の出勤時刻と退勤時刻が 1 時間単位で与えられます。
# N 日間の合計で得られる金額を計算してください。

# 入力例 1 の場合、4 日間で時給 X 円、Y 円、Z 円となる時間帯を満遍なく働いており、
# 金額の合計は Z×9 + X×8 + Y×5 + Z×1 = 1500×9 + 1000×8 + 1300×5 + 1500×1 = 29500 円となります。



# 入力される値
# 入力は以下のフォーマットで与えられます。

# X Y Z
# N
# S_1 T_1
# S_2 T_2
# ...
# S_N T_N
# ・1 行目には、通常の時給 X、夜の時給 Y、深夜の時給 Z がこの順に整数で半角スペース区切りで与えられます。
# ・2 行目には、出勤日数 N が整数で与えられます。
# ・続く N 行の i 番目 (1 ≦ i ≦ N) には、i 日目の出勤時刻 S_i と退勤時刻 T_i がこの順に整数で半角スペース区切りで与えられます。
# ・入力は合計で N + 2 行となり、入力値最終行の末尾に改行が 1 つ入ります。

# それぞれの値は文字列で標準入力から渡されます。



# 期待する出力
# ・N 日間の給料の合計金額を整数で出力してください。
# ・末尾に改行を入れ、余計な文字、空行を含んではいけません。



# 条件
# すべてのテストケースにおいて、以下の条件をみたします。

# ・0 ≦ X, Y, Z ≦ 3,000
# ・1 ≦ N ≦ 100
# ・0 ≦ S < T ≦ 23



# 解答コード



x, y, z = gets.chomp.split.map(&:to_i)
n = gets.to_i
total_salary = 0
n.times do
    s, t = gets.chomp.split.map(&:to_i)
    (s...t).each do |h|
        if h >= 9 && h < 17
            total_salary += x
        elsif h >= 17 && h < 22
            total_salary += y
        else    
            total_salary += z
        end    
    end    
end    

puts total_salary



# 解答時間  20分31秒
# 学習ポイント
# 時間帯毎に変化する時給と対象時間の求め方。
# 下記の処理をn回(n日分)行う。
# 出勤時刻から退勤時刻(退勤時刻は含まない)までの時間を1時間ずつ取り出していく。
# もし時間が9以上17未満ならx(9時から17時までの時給)をtotal_salaryにプラスする。
# y,zも同様
# ◯時未満で区切る理由...この処理は分単位ではなく時間単位なので、eachの範囲を(s..t)にしてしまうと実際の労働時間より1時間プラスされてしまう。
# 例...9時から12時の場合、9,10,11,12で4時間になる。なので(s...t)にして退勤時刻の1時間は除いて考える。(11:00~11:59が11時の枠になる)
# if文を◯時未満にしないと、◯時の枠(◯:00~○:59)が範囲に含まれることになってしまうため。