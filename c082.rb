#問題
# Paiza 高校で英語、国語、数学の 3 科目のテストがありました。

# Paiza 高校ではテストを受けた X 人に対して、科目ごとに、下から Y 位までの生徒を赤点としています。ただし、下から Y 位の生徒が複数いた場合、その全員が赤点となります (全員が同じ点数だった場合は全員が下から 1 位なので赤点となります)。
# また、下から i 位 (1 ≦ i ≦ X-1) の生徒が複数いた場合、次の順位はその人数分飛ばされます (下の図の国語の列を参考にしてください)。

# 入力例 1 では以下のようになります。

# 生徒の数は 4 人、下から 2 位までが赤点となります。

# 図1

# テストを受けた生徒の人数 X、赤点となってしまう下からの順位 Y、各生徒の科目ごとの点数が与えられるので、それぞれの生徒がいくつ赤点を取ったか出力してください。



# 入力される値
# 入力は以下のフォーマットで与えられます。

# X Y
# E_1 J_1 M_1
# E_2 J_2 M_2
# ...
# E_X J_X M_X
# ・1 行目にはテストを受けた生徒の人数を表す整数 X と赤点となってしまう下からの順位を表す整数 Y がこの順で半角スペース区切りで与えられます。
# ・続く X 行のうち、i 行目(1 ≦ i ≦ X)には i 番目の生徒の英語、国語、数学の点数を表す整数 E_i, J_i, M_i がこの順で半角スペース区切りで与えられます。
# ・入力は合計で X + 1 行となり、末尾に改行が 1 つ入ります。

# それぞれの値は文字列で標準入力から渡されます。



# 期待する出力
# 各生徒の赤点の数を以下の形式で出力してください。
# a_1
# a_2
# ...
# a_X
# ・期待する出力は X 行からなります。
# ・i 行目 (1 ≦ i ≦ X) には i 番目の生徒の赤点科目の数を出力してください。
# ・出力最終行の末尾に改行を入れ、余計な文字、空行を含んではいけません。



# 条件
# すべてのテストケースにおいて、以下の条件をみたします。

# ・2 ≦ X ≦ 100
# ・1 ≦ Y ≦ X
# ・0 ≦ E_i, J_i, M_i ≦ 100 (1 ≦ i ≦ X)



#解答コード



x, y = gets.chomp.split.map(&:to_i)
scores = []
x.times do 
    scores << gets.chomp.split.map(&:to_i)
end    

f = Array.new(x, 0) 

3.times do |i|
    subject_scores = scores.map { |s| s[i]}
    sorted_scores = subject_scores.sort
    
    cutoff_score = sorted_scores[y - 1]
    
    subject_scores.each_with_index do |score, index|
        if score <= cutoff_score
            f[index] += 1
        end 
    end   
end 

f.each do |count|
    puts count
end    

    



#解答時間　16分46秒
#学習ポイント
#順位・ランクなどの計算方法。
# 生徒毎の点数の配列を作成する。
# f...配列(赤点カウンター)
# x個の要素がある配列fを作成し、要素毎の初期値を0に設定する。
# 下記の処理を3回(教科が3科目の為)行う。
# subject_scores...scoresの中身は外側の配列(生徒の数だけ要素が存在する)と内側の配列(生徒1人の点数3科目分)ため、
# 外側の配列の要素(一人の生徒)をsとしてs[i]とすることでs[0]..s[2]までの範囲を取り出すことができる。
# subject_scoresでs[0]の場合、生徒毎の点数3科目から1番目の要素を取り出すことになる。
# 1番目のsubject_scoresは英語の点数がx個の配列になる。
# sorted_scores...subject_scoresを昇順にソートする。(小=>大)
# cutoff_score...sorted_scoresのインデックス番号yから1をマイナス(0ベースなのでy番目の要素である)
# subject_scoresから、each_with_indexで点数とインデックス番号を取り出している。
# もし点数がy番目の点数(cutoff_score)以下なら、配列fの対応したインデックス番号の要素(赤点カウンター)を1プラスする。

# なぜy番目以下なら赤点なのか...順位の被りがなかった場合、y = 2とすると1, 2位が赤点なので◯。順位の被り(3人)があった場合、y = 2とすると1位が3人なので
# y番目の要素はy位以下である。どの場合でもこのようにy番目の要素はy位以下になるため。

